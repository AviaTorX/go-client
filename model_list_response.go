/*
 * NFT Storage API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nftstorage

import (
	"encoding/json"
)

// ListResponse struct for ListResponse
type ListResponse struct {
	Ok *bool `json:"ok,omitempty"`
	Value *[]NFT `json:"value,omitempty"`
}

// NewListResponse instantiates a new ListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListResponse() *ListResponse {
	this := ListResponse{}
	var ok bool = true
	this.Ok = &ok
	return &this
}

// NewListResponseWithDefaults instantiates a new ListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListResponseWithDefaults() *ListResponse {
	this := ListResponse{}
	var ok bool = true
	this.Ok = &ok
	return &this
}

// GetOk returns the Ok field value if set, zero value otherwise.
func (o *ListResponse) GetOk() bool {
	if o == nil || o.Ok == nil {
		var ret bool
		return ret
	}
	return *o.Ok
}

// GetOkOk returns a tuple with the Ok field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListResponse) GetOkOk() (*bool, bool) {
	if o == nil || o.Ok == nil {
		return nil, false
	}
	return o.Ok, true
}

// HasOk returns a boolean if a field has been set.
func (o *ListResponse) HasOk() bool {
	if o != nil && o.Ok != nil {
		return true
	}

	return false
}

// SetOk gets a reference to the given bool and assigns it to the Ok field.
func (o *ListResponse) SetOk(v bool) {
	o.Ok = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ListResponse) GetValue() []NFT {
	if o == nil || o.Value == nil {
		var ret []NFT
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListResponse) GetValueOk() (*[]NFT, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ListResponse) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given []NFT and assigns it to the Value field.
func (o *ListResponse) SetValue(v []NFT) {
	o.Value = &v
}

func (o ListResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ok != nil {
		toSerialize["ok"] = o.Ok
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableListResponse struct {
	value *ListResponse
	isSet bool
}

func (v NullableListResponse) Get() *ListResponse {
	return v.value
}

func (v *NullableListResponse) Set(val *ListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListResponse(val *ListResponse) *NullableListResponse {
	return &NullableListResponse{value: val, isSet: true}
}

func (v NullableListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


