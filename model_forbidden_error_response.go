/*
 * NFT Storage API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nftstorage

import (
	"encoding/json"
)

// ForbiddenErrorResponse struct for ForbiddenErrorResponse
type ForbiddenErrorResponse struct {
	Ok *bool `json:"ok,omitempty"`
	Error *ForbiddenErrorResponseError `json:"error,omitempty"`
}

// NewForbiddenErrorResponse instantiates a new ForbiddenErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForbiddenErrorResponse() *ForbiddenErrorResponse {
	this := ForbiddenErrorResponse{}
	var ok bool = false
	this.Ok = &ok
	return &this
}

// NewForbiddenErrorResponseWithDefaults instantiates a new ForbiddenErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForbiddenErrorResponseWithDefaults() *ForbiddenErrorResponse {
	this := ForbiddenErrorResponse{}
	var ok bool = false
	this.Ok = &ok
	return &this
}

// GetOk returns the Ok field value if set, zero value otherwise.
func (o *ForbiddenErrorResponse) GetOk() bool {
	if o == nil || o.Ok == nil {
		var ret bool
		return ret
	}
	return *o.Ok
}

// GetOkOk returns a tuple with the Ok field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForbiddenErrorResponse) GetOkOk() (*bool, bool) {
	if o == nil || o.Ok == nil {
		return nil, false
	}
	return o.Ok, true
}

// HasOk returns a boolean if a field has been set.
func (o *ForbiddenErrorResponse) HasOk() bool {
	if o != nil && o.Ok != nil {
		return true
	}

	return false
}

// SetOk gets a reference to the given bool and assigns it to the Ok field.
func (o *ForbiddenErrorResponse) SetOk(v bool) {
	o.Ok = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ForbiddenErrorResponse) GetError() ForbiddenErrorResponseError {
	if o == nil || o.Error == nil {
		var ret ForbiddenErrorResponseError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForbiddenErrorResponse) GetErrorOk() (*ForbiddenErrorResponseError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ForbiddenErrorResponse) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ForbiddenErrorResponseError and assigns it to the Error field.
func (o *ForbiddenErrorResponse) SetError(v ForbiddenErrorResponseError) {
	o.Error = &v
}

func (o ForbiddenErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ok != nil {
		toSerialize["ok"] = o.Ok
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableForbiddenErrorResponse struct {
	value *ForbiddenErrorResponse
	isSet bool
}

func (v NullableForbiddenErrorResponse) Get() *ForbiddenErrorResponse {
	return v.value
}

func (v *NullableForbiddenErrorResponse) Set(val *ForbiddenErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableForbiddenErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableForbiddenErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForbiddenErrorResponse(val *ForbiddenErrorResponse) *NullableForbiddenErrorResponse {
	return &NullableForbiddenErrorResponse{value: val, isSet: true}
}

func (v NullableForbiddenErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForbiddenErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


