/*
 * NFT Storage API
 *
 * # API Reference 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nftstorage

import (
	"encoding/json"
)

// NFTDeals struct for NFTDeals
type NFTDeals struct {
	// Overall deal status
	Status *string `json:"status,omitempty"`
	Deals *[]Deal `json:"deals,omitempty"`
}

// NewNFTDeals instantiates a new NFTDeals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNFTDeals() *NFTDeals {
	this := NFTDeals{}
	return &this
}

// NewNFTDealsWithDefaults instantiates a new NFTDeals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNFTDealsWithDefaults() *NFTDeals {
	this := NFTDeals{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NFTDeals) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTDeals) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NFTDeals) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NFTDeals) SetStatus(v string) {
	o.Status = &v
}

// GetDeals returns the Deals field value if set, zero value otherwise.
func (o *NFTDeals) GetDeals() []Deal {
	if o == nil || o.Deals == nil {
		var ret []Deal
		return ret
	}
	return *o.Deals
}

// GetDealsOk returns a tuple with the Deals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTDeals) GetDealsOk() (*[]Deal, bool) {
	if o == nil || o.Deals == nil {
		return nil, false
	}
	return o.Deals, true
}

// HasDeals returns a boolean if a field has been set.
func (o *NFTDeals) HasDeals() bool {
	if o != nil && o.Deals != nil {
		return true
	}

	return false
}

// SetDeals gets a reference to the given []Deal and assigns it to the Deals field.
func (o *NFTDeals) SetDeals(v []Deal) {
	o.Deals = &v
}

func (o NFTDeals) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Deals != nil {
		toSerialize["deals"] = o.Deals
	}
	return json.Marshal(toSerialize)
}

type NullableNFTDeals struct {
	value *NFTDeals
	isSet bool
}

func (v NullableNFTDeals) Get() *NFTDeals {
	return v.value
}

func (v *NullableNFTDeals) Set(val *NFTDeals) {
	v.value = val
	v.isSet = true
}

func (v NullableNFTDeals) IsSet() bool {
	return v.isSet
}

func (v *NullableNFTDeals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFTDeals(val *NFTDeals) *NullableNFTDeals {
	return &NullableNFTDeals{value: val, isSet: true}
}

func (v NullableNFTDeals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFTDeals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


