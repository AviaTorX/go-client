/*
 * NFT Storage API
 *
 * # API Reference 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nftstorage

import (
	"encoding/json"
)

// UnauthorizedErrorResponse struct for UnauthorizedErrorResponse
type UnauthorizedErrorResponse struct {
	Ok *bool `json:"ok,omitempty"`
	Error *UnauthorizedErrorResponseError `json:"error,omitempty"`
}

// NewUnauthorizedErrorResponse instantiates a new UnauthorizedErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnauthorizedErrorResponse() *UnauthorizedErrorResponse {
	this := UnauthorizedErrorResponse{}
	var ok bool = false
	this.Ok = &ok
	return &this
}

// NewUnauthorizedErrorResponseWithDefaults instantiates a new UnauthorizedErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnauthorizedErrorResponseWithDefaults() *UnauthorizedErrorResponse {
	this := UnauthorizedErrorResponse{}
	var ok bool = false
	this.Ok = &ok
	return &this
}

// GetOk returns the Ok field value if set, zero value otherwise.
func (o *UnauthorizedErrorResponse) GetOk() bool {
	if o == nil || o.Ok == nil {
		var ret bool
		return ret
	}
	return *o.Ok
}

// GetOkOk returns a tuple with the Ok field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnauthorizedErrorResponse) GetOkOk() (*bool, bool) {
	if o == nil || o.Ok == nil {
		return nil, false
	}
	return o.Ok, true
}

// HasOk returns a boolean if a field has been set.
func (o *UnauthorizedErrorResponse) HasOk() bool {
	if o != nil && o.Ok != nil {
		return true
	}

	return false
}

// SetOk gets a reference to the given bool and assigns it to the Ok field.
func (o *UnauthorizedErrorResponse) SetOk(v bool) {
	o.Ok = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *UnauthorizedErrorResponse) GetError() UnauthorizedErrorResponseError {
	if o == nil || o.Error == nil {
		var ret UnauthorizedErrorResponseError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnauthorizedErrorResponse) GetErrorOk() (*UnauthorizedErrorResponseError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *UnauthorizedErrorResponse) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given UnauthorizedErrorResponseError and assigns it to the Error field.
func (o *UnauthorizedErrorResponse) SetError(v UnauthorizedErrorResponseError) {
	o.Error = &v
}

func (o UnauthorizedErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ok != nil {
		toSerialize["ok"] = o.Ok
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableUnauthorizedErrorResponse struct {
	value *UnauthorizedErrorResponse
	isSet bool
}

func (v NullableUnauthorizedErrorResponse) Get() *UnauthorizedErrorResponse {
	return v.value
}

func (v *NullableUnauthorizedErrorResponse) Set(val *UnauthorizedErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUnauthorizedErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUnauthorizedErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnauthorizedErrorResponse(val *UnauthorizedErrorResponse) *NullableUnauthorizedErrorResponse {
	return &NullableUnauthorizedErrorResponse{value: val, isSet: true}
}

func (v NullableUnauthorizedErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnauthorizedErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


