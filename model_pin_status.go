/*
 * NFT Storage API
 *
 * # API Reference 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nftstorage

import (
	"encoding/json"
	"fmt"
)

// PinStatus the model 'PinStatus'
type PinStatus string

// List of PinStatus
const (
	QUEUED PinStatus = "queued"
	PINNING PinStatus = "pinning"
	PINNED PinStatus = "pinned"
	FAILED PinStatus = "failed"
)

func (v *PinStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PinStatus(value)
	for _, existing := range []PinStatus{ "queued", "pinning", "pinned", "failed",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PinStatus", value)
}

// Ptr returns reference to PinStatus value
func (v PinStatus) Ptr() *PinStatus {
	return &v
}

type NullablePinStatus struct {
	value *PinStatus
	isSet bool
}

func (v NullablePinStatus) Get() *PinStatus {
	return v.value
}

func (v *NullablePinStatus) Set(val *PinStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePinStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePinStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinStatus(val *PinStatus) *NullablePinStatus {
	return &NullablePinStatus{value: val, isSet: true}
}

func (v NullablePinStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

